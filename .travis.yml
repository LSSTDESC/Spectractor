language: python

cache:
  directories:
  - "$TRAVIS_BUILD_DIR/build/NETCDF/src"
  - "$TRAVIS_BUILD_DIR/build/LIBRADTRAN/src"
  - "$TRAVIS_BUILD_DIR/build/ASTROMETRYNET/src"

addons: # for libradtran and astrometry.net library
  apt:
      packages:
        - gfortran
        - libgsl0-dev
        - libhdf5-dev
        - libopenmpi-dev
        - openmpi-bin
        - libnetpbm10
        - libnetpbm10-dev
        - netpbm
        - wcslib-dev
        - libcfitsio-dev
        - swig
        - gsl-bin
        - libgsl-dev

python:
  - "3.7"

notifications:
  webhooks: https://coveralls.io/webhook?repo_token=COVERALLS_REPO_TOKEN

before_install:
- sudo fallocate -l 12G /swapfile
- sudo chmod 600 /swapfile
- sudo mkswap /swapfile
- sudo swapon /swapfile
- sudo sysctl vm.swappiness=10
- sudo sysctl -w vm.max_map_count=1966080

install:
  - sudo apt-get update
  - sudo apt-get install gfortran
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  - if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
      wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # Useful for debugging any issues with conda
  - conda info -a

before_script:
  # use personal github token to clone slitless github private repo
  - echo -e "machine github.com\n  login $CI_USER_TOKEN" > ~/.netrc
  - export TRAVIS_WORKER_DOCKER_MEMORY=12G
  - export COVERALLS_PARALLEL=true
  # necessary for libradtran make uvspec command
  - conda create -n py27 python=2.7 pip
  - source activate py27
  - python --version
  - pip install pyutil numpy
  - "export PYSYN_CDBS=tests/data/"
  - "echo backend: agg > matplotlibrc"
  - git clone https://github.com/Unidata/netcdf-c.git
  - cd netcdf-c
  - git checkout tags/v4.7.3
  - "./configure  --prefix=$TRAVIS_BUILD_DIR/NETCDF --disable-netcdf-4"
  - "make"
  - "make install"
  - "cd ../"
  - "echo $LD_LIBRARY_PATH"
  - "export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/NETCDF/lib/"
  - "wget -L http://www.libradtran.org/download/history/libRadtran-2.0.3.tar.gz"
  - "gzip -d libRadtran-2.0.3.tar.gz"
  - "tar -xf libRadtran-2.0.3.tar"
  - "cd libRadtran-2.0.3"
  - "./configure  --prefix=$TRAVIS_BUILD_DIR/LIBRADTRAN --with-libnetcdf=$TRAVIS_BUILD_DIR/NETCDF/"
  - "make"
  - "cd ../"
  - "export LIBRADTRAN_DIR=libRadtran-2.0.3/"
  - export NETPBM_LIB="-L/usr/lib -lnetpbm"
  - export NETPBM_INC="-I/usr/include"
  - conda create -n py37 python=3.7 pip
  - source activate py37
  - conda remove --name py27 --all
  - conda info --envs
  - python --version
  - pip install pyutil numpy
  - wget http://astrometry.net/downloads/astrometry.net-0.78.tar.gz
  - tar xvzf astrometry.net-0.78.tar.gz
  - ls *.tar
  - rm -f *.tar
  - cd astrometry.net-*
  - make
  - make py
  - make extra
  - make install INSTALL_DIR=$TRAVIS_BUILD_DIR/ASTROMETRYNET
  - wget -r -nc http://data.astrometry.net/5000/index-5002-24.fits
  - wget -r -nc http://data.astrometry.net/5000/index-5000-40.fits
  - mv data.astrometry.net/5000/index-*.fits $TRAVIS_BUILD_DIR/ASTROMETRYNET/data/
  # - make install-indexes
  - cd ../
  - "export ASTROMETRYNET_DIR=$TRAVIS_BUILD_DIR/ASTROMETRYNET"
  - "echo 'disable_jit: 1' > .numba_config.yaml"


  # - "git clone https://$CI_USER_TOKEN@github.com/jeremyneveu/slitless.git slitless"
  # - "cd slitless"
  # - git checkout spectractor
  # - "pip install ."
  # - "cd ../"
  - pip install numpy nose coloredlogs six
  - pip install -r requirements.txt
  # - python setup.py build
  # - python setup.py install
  - pip install .

jobs:
  include:
  - stage: "full chain nosetest"
    script: nosetests tests/run_full_chain.py --all --debug --detailed-errors --verbose --process-restartworker --with-coverage --cover-package=spectractor
  - stage: "nosetests"
    script: nosetests tests/run_tests.py --all --debug --detailed-errors --verbose --process-restartworker --with-coverage --cover-package=spectractor
  - stage: "doctests and coverage"
    script: ./coverage_and_test.sh
#- coverage run -a --source=spectractor spectractor/*.py
#- coverage run -a --source=spectractor extractor simulator fit

after_success:
  - coveralls